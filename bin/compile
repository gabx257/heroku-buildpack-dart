#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e
#set -x
unset GIT_DIR

function message {
  echo "$1"
  sync
}

# https://devcenter.heroku.com/articles/buildpack-api
export_env_dir() {
  env_dir=$1
  message "-----> ENV_DIR is $env_dir"
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      message "-----> ENV_DIR contains file $e"
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

build_pubspec() {
  filename=$1
  message "building $filename"
  
  pub_dir=`dirname $filename`
  message "*** Found pubspec.yaml in $BUILD_DIR/$pub_dir"
  cd $BUILD_DIR/$pub_dir

  message "*** Running pub get"

  # dart pub --version

  #start pub from the /app folder to have correct symlink paths
  dart pub get

  message "*** Running compile"
  dart compile exe bin/server.dart -o $BUILD_DIR/server.exe
  chmod +x server.exe
  message "*** finished building"
  message "removing app src files"
  FILES=`ls $BUILD_DIR`
  message "----------> $FILES" 
  find $BUILD_DIR -mindepth 1 -not -name "server.exe" -not -name "Procfile" -exec rm -rf {} +
}

export_env_dir "$3"

mkdir -p "$1" "$2"
BUILD_DIR=$(cd "$1/" && pwd)
CACHE_DIR=$(cd "$2/" && pwd)

# this variable is used by pub to determine the package install location
PUB_CACHE="/app/pub-cache"
export PUB_CACHE
mkdir -p $PUB_CACHE

MACHINE=`uname -a`
message "-----> Welcome, this machine is: $MACHINE"

cd $CACHE_DIR



if [ -z "$DART_SDK_URL" ]; then
    message "ERROR: you must specify DART_SDK_URL to a Dart SDK for Linux. See README for this buildpack."
    exit 1
fi

extracted_version=$(echo "$DART_SDK_URL" | grep -oE '/release/[0-9]+\.[0-9]+\.[0-9]+/' | cut -d'/' -f3)
current_version=$($CACHE_DIR/dart-sdk/bin/dart --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')

if [ "$extracted_version" != "$current_version" ]; then

message "-----> Installing Dart VM via URL $DART_SDK_URL"

case "${DART_SDK_URL: -3}" in
  tar)
    message "SDK: tarball detected"
    curl -L -k $DART_SDK_URL -o - | tar xzf -
    ;;
  zip)
    message "SDK: zip detected"
    curl -L -k $DART_SDK_URL > dart-sdk.zip ; unzip -o -q dart-sdk.zip
    ;;
  deb)
    message "SDK: deb detected"
    # TODO
    message "Please use the .zip Dart SDK"
    ;;
  *)
    message "Invalid Dart SDK URL" #kill after this or keep going in case SDK is there from last push?
    ;;
esac
fi

# we need to copy the sdk into the /app folder in order for the sdk libraries
# to be referenced correctly
# reason being that the /tmp folder will be deleted after build, and /app
# resembles the location of the ready built app

DART_PATH=$CACHE_DIR/dart-sdk/bin
PUB_CACHE_BIN=$CACHE_DIR/pub-cache/bin
export PATH=$PATH:$DART_PATH:$PUB_CACHE_BIN

DART_BIN=`$DART_PATH/dart`
message "-----> Dart cmd found at $DART_BIN"


CAN_DART_RUN=`dart --version`
message "-----> Dart reports version: $CAN_DART_RUN"

cd $BUILD_DIR

if [ -z "$PUBSPEC_PATH" ]
then
  message "PUBSPEC_PATH is not set. Looping through all pubspec.yaml files."
  for filename in `find . -name pubspec.yaml | grep -v dart-sdk | grep -v pub-cache`; do
    build_pubspec $filename
  done
else
  message "PUBSPEC_PATH is set to $PUBSPEC_PATH"
  build_pubspec $PUBSPEC_PATH
fi
